from mazepy.plot.mazeprofile import MazeProfile
from mazepy.behav.graph import Graph
from mazepy.behav.element import Point, Edge

import numpy as np
import matplotlib.pyplot as plt
import time

if __name__ == "__main__":
    sample_graph = {1: [2, 13],2: [1],3: [4, 15],4: [3, 5],5: [4, 6],6: [5, 7, 18],7: [6, 8],8: [7],9: [10, 21],10: [9, 11],11: [10, 12],12: [11, 24],13: [1, 14, 25],14: [13, 26],15: [3, 27],16: [17, 28],17: [16, 18, 29],18: [6, 17],19: [20, 31],20: [19, 21],21: [9, 20],22: [23, 34],23: [22, 24],24: [12, 23,36],25: [13],26: [14, 27],27: [26, 15],28: [16],29: [17, 30],30: [29, 31, 42],31: [30, 19],32: [33, 44],33: [32, 34],34: [22, 33],35: [36],36: [35, 24],37: [38, 49],38: [37, 39],39: [40, 38, 51],40: [39],41: [42],42: [41, 30],43: [55],44: [32, 45],45: [44, 46],46: [45, 47],47: [46, 48],48: [47, 60],49: [37, 61],50: [51, 62],51: [39, 50,52],52: [51],53: [54],54: [53, 55,66],55: [43, 54,67],56: [57, 68],57: [56, 58],58: [57, 59],59: [58, 60],60: [48, 59],61: [49, 73],62: [50, 74],63: [64, 75],64: [63, 65],65: [64, 66],66: [54, 65],67: [55, 79],68: [56, 69],69: [68, 70],70: [69, 71],71: [70, 72],72: [71, 84],73: [61, 85],74: [62, 75],75: [74, 63],76: [77, 88],77: [76, 89],78: [79, 90],79: [78, 67],80: [81, 92],81: [80, 82],82: [81, 94],83: [95, 84],84: [72, 83, 96],85: [73, 97],86: [98],87: [88, 99],88: [87, 76],89: [77, 101],90: [78, 91],91: [90, 103],92: [80, 104],93: [105],94: [82, 95,106],95: [83, 94],96: [84],97: [85, 98, 109],98: [97, 86],99: [87, 100],100: [99, 112],101: [89, 102],102: [101, 114],103: [91, 104],104: [103, 92],105: [93, 106],106: [105, 94],107: [108, 119],108: [107, 120],109: [97, 110,121],110: [109, 122],111: [112, 123],112: [100, 111],113: [114, 125],114: [113, 102],115: [116, 127],116: [115, 117],117: [116, 129],118: [119, 130],119: [118, 107],120: [108],121: [109, 133],122: [110, 123],123: [111, 122],124: [125, 136],125: [124, 113],126: [127, 138],127: [115, 126],128: [129, 140],129: [128, 117,141],130: [118, 131,142],131: [130, 132],132: [131, 144],133: [121, 134],134: [133, 135],135: [134],136: [124, 137],137: [136, 138],138: [137, 126],139: [140],140: [139, 128],141: [129, 142],142: [130, 141,143],143: [142],144: [132]}
    p1, p2 = (3.5, 2.5), (9.5, 11.5)
    t1 = time.time()
    G = Graph(xbin=12, ybin=12, Graph=sample_graph)

    distance = G.shortest_distance(p1, p2)
    print(distance)
    
    print(time.time()-t1)

    Gg = G.ConnectMat
    Ps = G.Ps

    fig = plt.figure(figsize=(6,6))
    ax = plt.axes()
    ax.set_aspect('equal')
    #ax.plot([p1[0]-0.5, p2[0]-0.5], [p1[1]-0.5, p2[1]-0.5])

    for i in range(Gg.shape[0]-1):
        for j in range(i+1, Gg.shape[0]):
            if Gg[i, j] != 0:
                ax.plot([Ps[i, 0] - 0.5, Ps[j, 0] - 0.5], [Ps[i, 1] - 0.5, Ps[j, 1] - 0.5], ls = ':')
                #ax.text((Ps[i, 0] + Ps[j, 0])/2 - 0.5, (Ps[i, 1] + Ps[j, 1])/2 - 0.5, str(round(Gg[i, j], 1)))


    occu_map = np.zeros(144)*np.nan
    occu_map[0] = 0
    Maze = MazeProfile(xbin=12, ybin=12, Graph=sample_graph, occu_map=occu_map, ax = ax, color = 'black', linewidth = 2)
