from numpy import ndarray
from typing import Optional, Union

class VariableBin:
    def __init__(self, bins: ndarray) -> None: ...

class Variable1D:
    def __init__(self, x: ndarray) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def transform_to_bin(
        self, 
        xbin: int, 
        xmax: float, 
        xmin: Optional[float] = ...
    ) -> VariableBin: ...

class Variable2D:
    def __init__(self, x: ndarray, y: ndarray) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def transform_to_bin(
        self, 
        xbin: int, 
        ybin: int, 
        xmax: float, 
        ymax: float, 
        xmin: Optional[float] = ..., 
        ymin: Optional[float] = ...
    ) -> VariableBin: ...

class Variable3D:
    def __init__(self, x: ndarray, y: ndarray, z: ndarray) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def transform_to_bin(
        self, xbin: int, 
        ybin: int, 
        zbin: int, 
        xmax: float, 
        ymax: float, 
        zmax: float,
        xmin: Optional[float] = ..., 
        ymin: Optional[float] = ..., 
        zmin: Optional[float] = ...
    ) -> VariableBin: ...

class TuningCurve:
    def __init__(self, firing_rate: ndarray) -> None: ...

class _NeuralActivity:
    def __init__(
        self, 
        activity: ndarray, 
        time_stamp: Variable1D, 
        variable: Optional[VariableBin],
        ctype: Optional[str] = ...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    @property
    def shape(self) -> tuple: ...
    @property
    def n_neuron(self) -> int: ...
    def remove_nan(self) -> None: ...

class CalciumTraces(_NeuralActivity):
    def __init__(
        self,
        activity: ndarray,
        time_stamp: Variable1D,
        variable: Optional[VariableBin],
        ctype: Optional[str] = ...
    ) -> None: ...

class RawSpikeTrain(_NeuralActivity):
    def __init__(
        self,
        activity: ndarray,
        time_stamp: Variable1D,
        variable: Optional[VariableBin],
        ctype: Optional[str] = ...
    ) -> None: ...

class SpikeTrain(_NeuralActivity):
    def __init__(
        self,
        activity: ndarray,
        time_stamp: Variable1D,
        variable: Optional[VariableBin],
        ctype: Optional[str] = ...
    ) -> None: ...
    def calc_temporal_tuning_curve(
        self, twindow: float
    ) -> TuningCurve: ...
    def calc_tuning_curve(
        self, nbin: int, ctype=...
    ) -> TuningCurve: ...