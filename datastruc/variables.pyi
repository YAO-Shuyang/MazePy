from numpy import ndarray
from typing import Optional, Union, Callable
import numpy as np

class _VariableBase(ndarray):
    def __new__(cls, input_array: ndarray) -> '_VariableBase': ...
    def __array_finalize__(self, obj: Optional[ndarray]) -> None: ...
    def __init__(self, input_array: ndarray) -> None: ...
    def to_array(self) -> ndarray: ...

class VariableBin(_VariableBase):
    def __new__(cls, input_array: ndarray) -> 'VariableBin': ...
    def __array_finalize__(self, obj: Optional[ndarray]) -> None: ...
    def __init__(self, input_array: ndarray) -> None: ...
    @staticmethod
    def get_bin_center1d(xmin: float, xmax: float, nbins: int) -> ndarray: ...
    def get_bin_center2d(self, xmin: float, xmax: float, xnbins: int, ymin: float, ymax: float, ynbins: int) -> ndarray: ...
    def get_bin_center3d(self, xmin: float,xmax: float, xnbins: int, ymin: float, ymax: float, ynbins: int, zmin: float, zmax: float, znbins: int) -> ndarray: ...

class Variable1D(_VariableBase):
    meaning: Optional[str]

    def __new__(cls, input_array: ndarray, meaning: Optional[str] = ...) -> 'Variable1D': ...
    def __array_finalize__(self, obj: Optional[ndarray]) -> None: ...
    def __init__(self, input_array: ndarray, meaning: Optional[str] = ...) -> None: ...
    @property
    def x(self) -> 'Variable1D': ...
    def to_bin(self, xmin: float, xmax: float, nbin: int) -> VariableBin: ...

class Variable2D(ndarray):
    meaning: Optional[str]

    def __new__(cls, input_array: ndarray, meaning: Optional[str] = ...) -> 'Variable2D': ...
    def __array_finalize__(self, obj: Optional[ndarray]) -> None: ...
    def __init__(self,  input_array: ndarray, meaning: Optional[str] = ...) -> None: ...
    @property
    def x(self) -> Variable1D: ...
    @property
    def y(self) -> Variable1D: ...
    def to_bin(self, xmin: float, xmax: float, xnbins: int, ymin: float, ymax: float, ynbins: int) -> VariableBin: ...

class Variable3D(_VariableBase):
    meaning: Union[str, tuple[str, str, str], None] = None

    def __new__(cls, input_array: ndarray, meaning: Union[str, tuple[str, str, str], None] = ...) -> 'Variable3D': ...
    def __array_finalize__(self, obj: Optional[ndarray]) -> None: ...
    def __init__( self, input_array: ndarray, meaning: Union[str, tuple[str, str, str], None] = ...) -> None: ...
    @property
    def x(self) -> Variable1D: ...
    @property
    def y(self) -> Variable1D: ...
    @property
    def z(self) -> Variable1D: ...
    def to_bin(self, xmin: float, xmax: float, xnbins: int, ymin: float, ymax: float, ynbins: int, zmin: float, zmax: float, znbins: int) -> VariableBin: ...
